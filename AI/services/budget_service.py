import math
import json
import re
from typing import List, Dict
from datetime import datetime
from sqlalchemy.orm import Session
from openai import OpenAI
import requests
import sys
import os

# ÌòÑÏû¨ ÌååÏùº Í∏∞Ï§Ä AI Ìè¥Îçî Í≤ΩÎ°ú
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if BASE_DIR not in sys.path:
    sys.path.append(BASE_DIR)

import models
from config import settings
from schemas import BudgetRequest

client = OpenAI(api_key=settings.OPENAI_API_KEY)

# pricelevel ‚Üí ÏãùÏÇ¨ÎπÑ Îß§Ìïë (ÌèâÍ∑† 1Ïù∏Îãπ)
price_map = {
    0: 0,
    1: 7000,
    2: 14000,
    3: 23000,
    4: 40000
}

# ÏàôÎ∞ïÎπÑ Í≥ÑÏÇ∞ Ìï®Ïàò
def calculate_accommodation_cost(accommodation_price: int, nights: int, num_people: int) -> int:
    if num_people <= 2:
        total_cost = accommodation_price * nights
    else:
        extra_people = num_people - 2
        extra_fee_per_night = accommodation_price * 0.3 * extra_people
        total_cost = (accommodation_price + extra_fee_per_night) * nights
    return int(total_cost)

# Í±∞Î¶¨ Í≥ÑÏÇ∞ (haversine)
def haversine(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    R = 6371
    phi1, phi2 = math.radians(lat1), math.radians(lat2)
    dphi = math.radians(lat2 - lat1)
    dlambda = math.radians(lon2 - lon1)
    a = math.sin(dphi / 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(dlambda / 2) ** 2
    return R * 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

# ÍµêÌÜµÏöîÍ∏à Í≥ÑÏÇ∞ Î°úÏßÅ
def calculate_fare_between(loc1, loc2, num_people):
    lat1, lon1 = getattr(loc1, "latitude", None), getattr(loc1, "longitude", None)
    lat2, lon2 = getattr(loc2, "latitude", None), getattr(loc2, "longitude", None)
    if None in (lat1, lon1, lat2, lon2):
        return 0

    dist = haversine(lat1, lon1, lat2, lon2)
    if dist < 2.0:
        return 0

    fare = get_public_transport_fare(lat1, lon1, lat2, lon2)
    if fare == 0:
        if dist < 5:
            fare = 1450
        elif dist < 15:
            fare = 1850
        else:
            fare = 2250

    return fare * num_people

# ODSAY API Ìò∏Ï∂ú (Ïã§Ìå®Ïãú 0 Î∞òÌôò)
def get_public_transport_fare(lat1, lon1, lat2, lon2):
    api_key = settings.ODSAY_API_KEY
    url = "https://api.odsay.com/v1/api/searchPubTransPathT"
    params = {
        "apiKey": api_key,
        "SX": lon1,
        "SY": lat1,
        "EX": lon2,
        "EY": lat2,
        "OPT": 0
    }
    try:
        response = requests.get(url, params=params)
        if response.status_code != 200:
            return 0
        data = response.json()
        if "result" not in data or "path" not in data["result"] or not data["result"]["path"]:
            return 0
        fare = data["result"]["path"][0]["info"].get("payment")
        return fare if fare else 0
    except:
        return 0

# ÍµêÌÜµÎπÑ Ï†ÑÏ≤¥ Í≥ÑÏÇ∞
def calculate_transport_cost(plan_data, num_people: int = 1) -> int:
    total_cost = 0
    previous_day_last_place = None

    for day_plan in plan_data.plans:
        schedule = day_plan.schedule

        if previous_day_last_place:
            first_place = schedule[0]
            fare = calculate_fare_between(previous_day_last_place, first_place, num_people)
            total_cost += fare

        for i in range(len(schedule) - 1):
            loc1, loc2 = schedule[i], schedule[i + 1]
            fare = calculate_fare_between(loc1, loc2, num_people)
            total_cost += fare

        previous_day_last_place = schedule[-1]

    return total_cost

# ÏãùÏÇ¨ÎπÑ Í≥ÑÏÇ∞
def calculate_food_cost(plan_data, num_people: int = 1) -> int:
    total_cost = 0
    for day_plan in plan_data.plans:
        for item in day_plan.schedule:
            price_level = getattr(item, "pricelevel", 0)
            avg_price = price_map.get(price_level, 0)
            total_cost += avg_price * num_people
    return total_cost

# GPT ÏùëÎãµ ÌååÏã± ‚Üí Ïà´ÏûêÎßå Ï∂îÏ∂ú + Î¨¥Î£å Ï≤òÎ¶¨
def parse_fee(response_text: str) -> int:
    response_text = response_text.strip()
    
    if 'Î¨¥Î£å' in response_text:
        return 0
    
    match = re.search(r'\d+', response_text)
    return int(match.group()) if match else 0

def ask_gpt_for_entry_fee(place_name: str) -> int:
    short_name = place_name[:50]
    prompt = (
    f"'{short_name}'ÏùÄ ÌïúÍµ≠Ïùò Í¥ÄÍ¥ëÏßÄ ÎòêÎäî Ï≤¥ÌóòÌòï ÏãúÏÑ§ÏûÖÎãàÎã§. "
    f"Ïù¥ ÏãúÏÑ§ÏùÄ ÏùºÎ∞òÏ†ÅÏúºÎ°ú ÏûÖÏû•Î£åÎÇò Ï≤¥ÌóòÎπÑÏö©Ïù¥ Î∞úÏÉùÌï† Ïàò ÏûàÏäµÎãàÎã§. "
    f"Ìï¥Îãπ Ïû•ÏÜåÏùò ÌèâÍ∑† ÏûÖÏû•Î£å ÎòêÎäî Ï≤¥ÌóòÎπÑÏö©ÏùÑ 1Ïù∏Îãπ Í∏∞Ï§ÄÏúºÎ°ú ÌïúÍµ≠ ÏõêÌôîÎ°ú ÏïåÎ†§Ï£ºÏÑ∏Ïöî. "
    f"Í∞ÄÎä•ÌïòÎ©¥ ÏµúÍ∑º 2024ÎÖÑ~2025ÎÖÑ ÌïúÍµ≠ Í∏∞Ï§Ä Í∞ÄÍ≤©ÏùÑ Ï∞∏Í≥†Ìï¥ Ï∂îÏ†ïÌï¥Ï§ò. "
    f"ÎßåÏïΩ ÏûÖÏû•Î£åÍ∞Ä ÏóÜÍ±∞ÎÇò Î¨¥Î£å ÏãúÏÑ§Ïù¥ÎùºÎ©¥ Î∞òÎìúÏãú '0'ÏúºÎ°ú ÏùëÎãµÌï¥Ï§ò. "
    f"Î∞òÎìúÏãú Ïà´ÏûêÎßå Îã®ÏúÑ ÏóÜÏù¥ Ï†ïÏàò ÌòïÌÉúÎ°ú ÏùëÎãµÌï¥Ï§ò. "
    f"Ïòà: 15000"
)
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=10,
            temperature=0.3,
        )
        response_text = response.choices[0].message.content.strip()
        print(f"[GPT ÏûÖÏû•Î£å Ï∂îÏ†ï] {place_name} ‚Üí GPT ÏùëÎãµ: {response_text}")
        fee = parse_fee(response_text)
    except Exception as e:
        print(f"ÏûÖÏû•Î£å Ï∂îÏ∂ú Ïã§Ìå®: {e}")
        fee = 0
    return fee


def estimate_entry_fees(plan_data, num_people: int = 1) -> int:
    total_fee = 0
    for day_plan in plan_data.plans:
        schedule = day_plan.schedule
        
        
        for item in schedule[:-1]: #ÎßàÏßÄÎßâ Ïû•ÏÜåÍ∞Ä ÏàôÏÜåÎùºÎäî Í∞ÄÏ†ïÌïòÏóê ÏàôÏÜå Ï†úÏô∏ Í≥ÑÏÇ∞
            place_name = getattr(item, "place", None)
            pricelevel = getattr(item, "pricelevel", 0)
            if pricelevel == 0 and place_name:
                fee = ask_gpt_for_entry_fee(place_name)
                total_fee += fee * num_people
    return total_fee

# GPT ÏòàÏÇ∞ Í∞êÏÑ± ÏΩîÎ©òÌä∏
def ask_gpt_budget_comment(user_budget: int, end_city: str, days: int = 2, num_people: int = 1) -> str:
    prompt = f"""
{end_city} ÏßÄÏó≠ÏùÑ {days}Ïùº ÎèôÏïà {num_people}Î™ÖÏù¥ Ïó¨ÌñâÌïòÎäî ÏùºÏ†ïÏù¥ÏóêÏöî.
Ï∂îÏ≤úÎêú Ïó¨Ìñâ ÏΩîÏä§Î•º Í∏∞Ï§ÄÏúºÎ°ú ÏòàÏÉÅ Ïó¨Ìñâ ÎπÑÏö©ÏùÄ Ï¥ù {user_budget}ÏõêÏù¥ÏóêÏöî.
ÎÑàÎäî ÏµúÍ≥†Ïùò Ïó¨Ìñâ Í∞ÄÏù¥ÎìúÏù¥Ïûê Ïó¨Ìñâ ÏòàÏÇ∞ ÌèâÍ∞Ä ÎèÑÏö∞ÎØ∏Ïïº.
Ïù¥ Í∏àÏï°Ïù¥ Ìï¥Îãπ ÏßÄÏó≠(Ïòà: ÏÑúÏö∏ÏãúÍ∞Ä ÏïÑÎãå {end_city} Í∞ôÏùÄ ÌñâÏ†ïÍµ¨ Í∏∞Ï§Ä)Ïùò ÌèâÍ∑† Ïó¨Ìñâ ÎπÑÏö©Í≥º ÎπÑÍµêÌï¥ÏÑú
ÎπÑÏã∏ Î≥¥Ïù¥ÎäîÏßÄ, Ï†ÅÎãπÌïúÏßÄ, Ï†ÄÎ†¥Ìï¥ Î≥¥Ïù¥ÎäîÏßÄÎ•º ÏßßÍ≤å Í∞êÏÑ±Ï†ÅÏúºÎ°ú ÌèâÍ∞ÄÌï¥Ï§ò. Í∑∏ Ìï¥Îãπ ÏßÄÏó≠Ïùò ÌèâÍ∑† Ïó¨Ìñâ ÎπÑÏö©ÎèÑ Ïñ∏Í∏âÌï¥Ï§ò.

- "~Í∞ôÏïÑÏöî", "~Ïùº Í≤É Í∞ôÏïÑÏöî", "~ÌïòÎ©¥ Ï¢ãÍ≤†Ïñ¥Ïöî"Ï≤òÎüº Î∂ÄÎìúÎü¨Ïö¥ ÎßêÌà¨Î°ú.
- MZÏÑ∏ÎåÄ Í∞êÏÑ± Ïù¥Î™®ÏßÄÎ•º ÏÑºÏä§ ÏûàÍ≤å ÌôúÏö©Ìï¥Ï§ò.
- ÏÑ§Î™ÖÌïòÏßÄ ÎßêÍ≥†, ÏπúÍµ¨ÏóêÍ≤å ÎßêÌïòÎìØ ÏûêÏó∞Ïä§ÎüΩÍ≥† Í≥µÍ∞êÎêòÎäî ÌïúÎëê Î¨∏Ïû•ÏúºÎ°úÎßå ÎßêÌï¥Ï§ò.
Ïòà: "ÏÇ¥Ïßù ÎπÑÏã∏ÏßÄÎßå Í∑∏ÎßåÌïú Í∞ÄÏπòÍ∞Ä ÏûàÏùÑ Í≤É Í∞ôÏïÑÏöî ‚ú®", "Í∞ÄÏÑ±ÎπÑ ÏµúÍ≥† ÏΩîÏä§ÏòàÏöî! üòéüëç"
- ÎπÑÏö© ÎäêÎÇåÎøê ÏïÑÎãàÎùº, 'Ïôú Í∑∏Î†áÍ≤å ÎäêÍª¥Ïßà Ïàò ÏûàÎäîÏßÄ'Î•º ÏÑºÏä§ ÏûàÍ≤å ÏÇ¥Ïßù ÎçßÎ∂ôÏó¨Ï§ò.
"""
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "ÎÑàÎäî ÏÑºÏä§ ÏûàÎäî Í∞êÏÑ± Ïó¨Ìñâ Í∞ÄÏù¥ÎìúÏïº. Í∞êÏÑ±Ï†ÅÏù∏ ÏΩîÎ©òÌä∏Î•º ÏπúÍµ¨ÏóêÍ≤å ÎßêÌïòÎìØ Ïç®Ï§ò."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("GPT ÏòàÏÇ∞ ÏΩîÎ©òÌä∏ ÏÉùÏÑ± Ïã§Ìå®:", e)
        return "ÏòàÏÇ∞ Î∂ÑÏÑùÏóê Ïã§Ìå®ÌñàÏñ¥Ïöî. Îã§ÏùåÏóê Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî."

# Ï†ÑÏ≤¥ ÏòàÏÇ∞ Í≥ÑÏÇ∞
def calculate_total_budget_from_plan(db: Session, plan_data: BudgetRequest) -> Dict:
    num_people = plan_data.peopleCount

    food_cost = calculate_food_cost(plan_data, num_people)
    entry_fees = estimate_entry_fees(plan_data, num_people)
    transport_cost = calculate_transport_cost(plan_data, num_people)

    # ÏàôÎ∞ïÎπÑ Í≥ÑÏÇ∞
    first_day_schedule = plan_data.plans[0].schedule
    last_item = first_day_schedule[-1]
    accommodation_place_id = getattr(last_item, "placeId", None)

    accommodation_price = 0
    if accommodation_place_id:
        accommodation = db.query(models.Accommodation).filter(
            models.Accommodation.place_id == accommodation_place_id
        ).first()
        if accommodation:
            accommodation_price = accommodation.price

    nights = max(len(plan_data.plans) - 1, 0)
    accommodation_cost = calculate_accommodation_cost(accommodation_price, nights, num_people)

    total_cost = food_cost + entry_fees + transport_cost + accommodation_cost

    end_city = plan_data.endCity if hasattr(plan_data, "endCity") and plan_data.endCity else "Ïó¨ÌñâÏßÄ"

    budget_comment = ask_gpt_budget_comment(
        user_budget=total_cost,
        end_city=end_city,
        days=len(plan_data.plans),
        num_people=num_people
    )

    return {
        "food_cost": food_cost,
        "entry_fees": entry_fees,
        "transport_cost": transport_cost,
        "accommodation_cost": accommodation_cost,
        "total_cost": total_cost,
        "comment": budget_comment
    }

if __name__ == "__main__":
    print("Ìè¨Ïä§Ìä∏Îß®ÏóêÏÑú Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞Î•º calculate_total_budget_from_plan(plan_data)Î°ú ÎÑòÍ≤®Ï£ºÏÑ∏Ïöî.")
